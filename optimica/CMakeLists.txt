if(ENABLE_MODELICA_COMPILER)
  include(DownloadModelica.cmake)
  
  if(APPLE)
    set(optimica_tar_root "install")
    set(optimica_md5 "b3d2f4690c506753fdd9399ad1d3af6a")
  elseif(UNIX)
    set(optimica_tar_root "install")
    set(optimica_md5 "b3d2f4690c506753fdd9399ad1d3af6a")
  else()
    set(optimica_tar_root "install")
    set(optimica_md5 "b3d2f4690c506753fdd9399ad1d3af6a")
  endif()
  
  set(optimica_path "${PROJECT_BINARY_DIR}/Optimica/")
  
  find_file(OPTIMICA_TARFILE OCT-1.37.5-final-ubuntu.tar.gz PATHS /usr/local/etc REQUIRED)
  set(OPTIMICA_TARFILE_URL
      "file://${OPTIMICA_TARFILE}"
      CACHE STRING "Tarball of Optimica distribution")
  
  download_modelica(
    ${optimica_path} # The final directory name
    ${optimica_tar_root} # The directory name of the tarball root, this will be
                         # moved / renamed to modelica_path
    ${optimica_md5} # The md5 of the tarball
    ${OPTIMICA_TARFILE_URL} # The download url. Can be a local file:// url
  )
  
  set(MSL_ROOT_DIR "${optimica_path}/ThirdParty/MSL")
  set(MSL_VER "MSL400")
  install(DIRECTORY "${MSL_ROOT_DIR}" DESTINATION etc/)
  
  target_compile_definitions(compile_options INTERFACE -DENABLE_MODELICA_COMPILER)
  
  find_package(Java)
  get_filename_component(java_bin ${Java_JAVAC_EXECUTABLE} DIRECTORY)
  find_program(NATIVE_IMAGE_EXECUTABLE native-image ${java_bin})
  
  set(jars
      "${optimica_path}/ThirdParty/Beaver/lib/beaver-rt.jar"
      "${optimica_path}/ThirdParty/gson/lib/gson-2.8.5.jar"
      "${optimica_path}/lib/ModelicaCompiler.jar"
      "${optimica_path}/lib/separateProcess.jar"
      "${optimica_path}/lib/util.jar"
      "${optimica_path}/lib/OptimicaCompiler.jar"
      "${optimica_path}/lib/casadi_interface/ModelicaCompiler.jar"
      "${optimica_path}/lib/casadi_interface/util.jar"
      "${optimica_path}/lib/casadi_interface/OptimicaCompiler.jar"
      ${PROJECT_SOURCE_DIR}/java/json-simple-3.1.1.jar)
  
  foreach(jar IN LISTS jars)
    string(CONCAT classpath ${classpath} "${jar}:")
  endforeach()
  string(CONCAT classpath ${classpath} ${CMAKE_CURRENT_SOURCE_DIR}:${CMAKE_CURRENT_BINARY_DIR})
  
  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/SpawnCompilerDelegator.class
    COMMAND ${Java_JAVAC_EXECUTABLE} -d ${CMAKE_CURRENT_BINARY_DIR} -classpath ${classpath} ${CMAKE_CURRENT_SOURCE_DIR}/SpawnCompilerDelegator.java
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/SpawnCompilerDelegator.java)
  
  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Optimica.class
    COMMAND ${Java_JAVAC_EXECUTABLE} -d ${CMAKE_CURRENT_BINARY_DIR} -classpath ${classpath} ${CMAKE_CURRENT_SOURCE_DIR}/Optimica.java
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Optimica.java ${CMAKE_CURRENT_BINARY_DIR}/SpawnCompilerDelegator.class)
  
  # optimica-reflect is a target used to generate reflection information that is used by native-image
  configure_file(reflect.cpp.in reflect.cxx)
  add_executable(
    optimica-reflect 
    reflect.cxx
    ${CMAKE_CURRENT_BINARY_DIR}/Optimica.class
  )
  target_include_directories(optimica-reflect PRIVATE ${PROJECT_SOURCE_DIR})
  target_link_libraries(
    optimica-reflect
    PRIVATE CONAN_PKG::nlohmann_json spawn_utils spawn_mbl compile_options
  )
  set(reflect_config ${CMAKE_CURRENT_BINARY_DIR}/META-INF/native-image/reflect-config.json)
  add_custom_command(
    OUTPUT ${reflect_config}
    COMMAND optimica-reflect
  )
  
  # RPATH complications mean the library needs to be generated next to the spawn
  # executable Maybe this can be fixed
  set(optimica_lib_path "${PROJECT_BINARY_DIR}/cli/optimica${CMAKE_SHARED_LIBRARY_SUFFIX}")
  
  add_custom_command(
    OUTPUT ${optimica_lib_path}
    COMMAND ${NATIVE_IMAGE_EXECUTABLE} 
    -classpath ${classpath} 
    -H:APIFunctionPrefix="optimica_" --shared Optimica
    WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/cli"
    DEPENDS
    ${CMAKE_CURRENT_BINARY_DIR}/SpawnCompilerDelegator.class
    ${CMAKE_CURRENT_BINARY_DIR}/Optimica.class
    ${reflect_config}
  )
  
  add_custom_target(optimica-lib DEPENDS ${optimica_lib_path})
  add_library(optimica SHARED IMPORTED GLOBAL)
  set_target_properties(optimica PROPERTIES IMPORTED_LOCATION ${optimica_lib_path})
  add_dependencies(optimica optimica-lib)
  
  if(WIN32)
    install(PROGRAMS ${optimica_lib_path} DESTINATION bin)
  else()
    install(PROGRAMS ${optimica_lib_path} DESTINATION lib)
  endif()
  
  # GFortran is a runtime dependency of FMUs that are generated by Optimica/JModelica
  find_library(GFortranLib NAMES gfortran PATHS /usr/lib/gcc/x86_64-linux-gnu/7/ /usr/lib/gcc/x86_64-linux-gnu/8/ /usr/lib/gcc/x86_64-linux-gnu/9/ REQUIRED)
  file(REAL_PATH ${GFortranLib} GFORTRANLIB_REAL_PATH)
  cmake_path(GET GFORTRANLIB_REAL_PATH FILENAME GFORTRANLIB_NAME)
  set(GFORTRANLIB_EMBEDDED_PATH "usr/lib/${GFORTRANLIB_NAME}")
  
  list(APPEND embedded_files ${GFORTRANLIB_REAL_PATH})
  list(APPEND embedded_paths ${GFORTRANLIB_EMBEDDED_PATH})
  
  include(EmbedOptimica.cmake)
  embed_optimica(${optimica_path} optimica_files optimica_paths)
  
  list(APPEND embedded_files ${optimica_files})
  list(APPEND embedded_paths ${optimica_paths})
  
  embed_files("${embedded_files}" "${embedded_paths}" embedded_output spawn_optimica)
  configure_file(config.cpp.in config.cxx)

  add_library(spawn_optimica 
    ${embedded_output}
    config.hpp
    ${CMAKE_CURRENT_BINARY_DIR}/config.cxx
    optimica.hpp
    optimica.cpp
  )
  target_link_libraries(spawn_optimica PUBLIC spawn_utils compiler spawn_mbl CONAN_PKG::nlohmann_json CONAN_PKG::pugixml compile_options)
  target_link_libraries(optimica INTERFACE spawn_optimica)
endif()
