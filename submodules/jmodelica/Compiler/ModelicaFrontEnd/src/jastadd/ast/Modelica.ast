/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/**
 * \mainpage API documentation of the JModelica.org Modelica Front-end
 *
 * The API documentation of the Modelica %compiler front-end is yet rudimentary. 
 * Also, the APIs for the Java classes contains several methods that are 
 * part of the internal JastAdd run-time system - these methods are not intended
 * to be used by the user.
 * 
 * We are currently working together with the JastAdd team to develop a 
 * documentation system where internal methods are hidden and where the user
 * API is exposed.
 *
 * The Modelica %compiler is organized into a number of different packages:
 * <ul>
 *   <li> org.jmodelica.modelica.parser containing parsers for Modelica
 *   and Flat Modelica code.</li>
 *   <li> org.jmodelica.modelica.compiler contains the actual %compiler, including
 *   the classes used to construct the Abstract Syntax Trees (ASTs) and the
 *   %compiler driver class ModelicaCompiler.</li>
 *   <li> org.jmodelica.util contains some helper classes which are independent
 *   of the AST classes.</li>
 * </ul>
 * 
 * Notice that the Java classes are not intended to be edited manually (with
 * the exception of the classes in org.jmodelica.util), but are rather 
 * automatically generated by the JastAdd tool. In order to extend or 
 * modify the functionality of the %compiler, edit the .%ast, .jrag and .jadd
 * files.
 *
 */


// Modelica abstract grammar




/**
 * \package org.jmodelica.ast Package containing all AST classes.
 */

abstract SrcBaseNode : BaseNode;

/**
 * A class representing the root node of a source AST.
 */
SourceRoot : Root ::= Program;
 

Program : SrcBaseNode ::= 
            UnstructuredEntity:SrcStoredDefinition* 
            /SrcUnknownClassDecl/
            /UnknownComponent:SrcComponentClause/
            /EnumBaseDecl:SrcEnumClassDecl/
            /PredefinedType:SrcBaseClassDecl*/ 
            /BuiltInType:SrcClassDecl*/   
            /BuiltInFunction:SrcBaseClassDecl*/
            /SrcLibNode*/
            /AnonymousClass:SrcBaseClassDecl*/
            /InstProgramRoot/;

SrcStoredDefinition : SrcBaseNode ::= [SrcWithin] SrcClassDecl*;

SrcWithin : SrcBaseNode ::= [PackageName:SrcAccess];

abstract SrcClassDecl : SrcElement       ::= Name:SrcIdDecl;
abstract SrcBaseClassDecl : SrcClassDecl ::= <Encapsulated:boolean>
                                       <Partial:boolean>
                                       SrcRestriction 
                                       <Redeclare:boolean>
                                       <Final:boolean>
                                       <Inner:boolean>
                                       <Outer:boolean>
                                       <Replaceable:boolean>
                                       [SrcConstrainingClause]
                                       [ConstrainingClauseComment:SrcComment];

SrcUnknownClassDecl : SrcFullClassDecl;

SrcFullClassDecl : SrcBaseClassDecl ::= [SrcStringComment] 
                                  SrcClause*
                                  [SrcExternalClause] 
                                  [SrcAnnotation]
                                  SrcEndDecl;

SrcLibClassDecl : SrcFullClassDecl ::= SrcLibNode*;
SrcLibNode : SrcClassDecl ::= <FileName:String>
                        <Structured:boolean> 
                        <Version:String> 
                        <Reason:SrcLibNode.LoadReason> 
                        /SrcStoredDefinition/;

SrcShortClassDecl : SrcBaseClassDecl ::= SrcExtendsClauseShortClass;

SrcExtendsClauseShortClass : SrcExtendsClause ::= [SrcTypePrefixFlow] 
                                            [SrcTypePrefixVariability]
                                            [SrcTypePrefixInputOutput] 
                                            [SrcArraySubscripts] 
                                            SrcComment; 
                            
SrcExtendClassDecl : SrcFullClassDecl ::= SrcInlineExtendsClause;
                                   
SrcPrimitiveClassDecl : SrcFullClassDecl;
SrcRealClassDecl      : SrcPrimitiveClassDecl;
SrcIntegerClassDecl   : SrcPrimitiveClassDecl;
SrcBooleanClassDecl   : SrcPrimitiveClassDecl;
SrcStringClassDecl    : SrcPrimitiveClassDecl;
SrcEnumClassDecl      : SrcPrimitiveClassDecl;

SrcEnumLiteralDecl : SrcComponentDecl;

SrcBuiltInClassDecl : SrcClassDecl;

SrcConstrainingClause : SrcBaseNode ::= SrcAccess [SrcClassModification];

abstract SrcRestriction : SrcBaseNode;
SrcModel               : SrcRestriction;
SrcBlock               : SrcRestriction;
SrcClass              : SrcRestriction;
SrcConnector           : SrcRestriction;
SrcExpandableConnector : SrcConnector;
SrcType               : SrcRestriction;
SrcPackage            : SrcRestriction;
SrcFunction            : SrcRestriction;
SrcRecord              : SrcRestriction;
SrcOperatorRecord      : SrcRecord;
SrcOperator            : SrcRestriction;
SrcOperatorFunction    : SrcFunction;

SrcExternalClause : SrcBaseNode ::= [SrcExternalLanguage] 
                                    [SrcExternalFunctionCall] 
                                    [SrcAnnotation];
                   
SrcExternalFunctionCall : SrcBaseNode ::= [ReturnVar:SrcAccess] FunctionName:SrcIdDecl Arg:SrcExp*;

SrcExternalLanguage : SrcBaseNode ::= <Language>;

abstract SrcClause : SrcBaseNode;

abstract SrcElementList  : SrcClause ::= SrcElement*;
SrcPublicElementList     : SrcElementList;
SrcDefaultElementList    : SrcPublicElementList;
SrcProtectedElementList  : SrcElementList;
SrcEquationClause        : SrcClause ::= SrcAbstractEquation*;
SrcInitialEquationClause : SrcEquationClause;
SrcAlgorithm             : SrcClause ::= SrcStatement*;
SrcInitialAlgorithm      : SrcAlgorithm;

abstract SrcElement : SrcBaseNode;
SrcExtendsClause           : SrcElement ::= Super:SrcAccess [SrcClassModification] [SrcAnnotation];
SrcInlineExtendsClause     : SrcExtendsClause;
abstract SrcImportClause   : SrcElement ::= PackageName:SrcAccess SrcComment;
SrcImportClauseQualified   : SrcImportClause;
SrcImportClauseUnqualified : SrcImportClause;
SrcImportClauseRename      : SrcImportClause ::= SrcIdDecl;

SrcComponentClause : SrcElement ::= <Redeclare:boolean> 
                              <Final:boolean> 
                              <Inner:boolean> 
                              <Outer:boolean> 
                              <Replaceable:boolean> 
                              [SrcTypePrefixFlow] 
                              [SrcTypePrefixVariability] 
                              [SrcTypePrefixInputOutput] 
                              ClassName:SrcAccess 
                              [TypeArraySubscripts:SrcArraySubscripts]
                              SrcComponentDecl*
                              [SrcConstrainingClause] 
                              SrcComment;
SrcEnumComponentClause : SrcComponentClause;

SrcComponentDecl : SrcBaseNode ::= Name:SrcIdDecl 
                                   [VarArraySubscripts:SrcArraySubscripts] 
                                   [SrcModification] 
                                   [SrcConditionalAttribute]
                                   SrcComment;

SrcUnknownComponentDecl : SrcComponentDecl;

abstract SrcTypePrefix     : SrcBaseNode;
abstract SrcTypePrefixFlow : SrcTypePrefix;
SrcFlow       : SrcTypePrefixFlow;
SrcStream     : SrcTypePrefixFlow;
abstract SrcTypePrefixVariability : SrcTypePrefix;
SrcContinuous : SrcTypePrefixVariability;
SrcDiscrete   : SrcTypePrefixVariability;
SrcParameter  : SrcTypePrefixVariability;
SrcIndexParameter : SrcParameter;
SrcConstant   : SrcTypePrefixVariability;
abstract SrcTypePrefixInputOutput : SrcTypePrefix;
SrcInput      : SrcTypePrefixInputOutput;
SrcOutput     : SrcTypePrefixInputOutput;

SrcComment       : SrcBaseNode ::= [SrcStringComment] [SrcAnnotation];
SrcStringComment : SrcBaseNode ::= SrcExp;

// Annotations and modifications
SrcConditionalAttribute : SrcBaseNode ::= SrcExp;

abstract SrcModification : SrcBaseNode;
SrcCompleteModification  : SrcModification ::= SrcClassModification [SrcValueModification];
SrcValueModification     : SrcModification ::= SrcExp;
SrcDummyModification     : SrcValueModification;

SrcClassModification : SrcModification ::= SrcArgument*;
abstract SrcArgument : SrcModification ::= <Each:boolean> <Final:boolean>;

abstract SrcNamedModification   : SrcArgument ::= Name:SrcAccess;
abstract SrcElementModification : SrcNamedModification ::= [SrcModification] SrcComment;
SrcComponentModification : SrcElementModification; 
abstract SrcElementRedeclare    : SrcNamedModification;
SrcClassRedeclare        : SrcElementRedeclare ::= SrcBaseClassDecl;
SrcComponentRedeclare    : SrcElementRedeclare ::= SrcComponentClause;

abstract SrcAnnotation : SrcBaseNode;

SrcParseAnnotation : SrcAnnotation ::= SrcClassModification;

abstract SrcAbstractExp : SrcBaseNode;
abstract SrcExp : SrcAbstractExp;

abstract SrcAbstractEquation         : SrcBaseNode ::= SrcComment;
SrcEquation             : SrcAbstractEquation ::= Left:SrcExp Right:SrcExp;
SrcConnectClause        : SrcAbstractEquation ::= Connector1:SrcAccess Connector2:SrcAccess;
abstract SrcIfWhenElseEquation       : SrcAbstractEquation ::= SrcAbstractEquation*;
abstract SrcIfWhenEquation           : SrcIfWhenElseEquation ::= Test:SrcExp [Else:SrcIfWhenElseEquation];
SrcIfEquation           : SrcIfWhenEquation;
SrcWhenEquation         : SrcIfWhenEquation; 
SrcElseEquation         : SrcIfWhenElseEquation;
SrcForClauseE           : SrcAbstractEquation ::= SrcForIndex* SrcAbstractEquation*;
SrcFunctionCallEquation : SrcAbstractEquation ::= Left:SrcFunctionCallLeft* Call:SrcFunctionCall;

SrcFunctionCallLeft : SrcBaseNode ::= [SrcAccess];
SrcForIndex : SrcComponentClause ::= [SrcExp];
SrcForIndexDecl : SrcComponentDecl;
         
abstract SrcStatement    : SrcBaseNode  ::= SrcComment;
SrcAssignStmt          : SrcStatement ::= Left:SrcAccess Right:SrcExp;
SrcFunctionCallStmt    : SrcStatement ::= Left:SrcFunctionCallLeft* SrcFunctionCall;
SrcBreakStmt           : SrcStatement;
SrcReturnStmt          : SrcStatement;
abstract SrcIfWhenStmt   : SrcStatement ::= SrcIfWhenClause*;
SrcIfStmt              : SrcIfWhenStmt ::= [SrcElseClause];
SrcWhenStmt            : SrcIfWhenStmt;
SrcElseClause          : SrcBaseNode ::= Stmt:SrcStatement*;
abstract SrcIfWhenClause : SrcBaseNode  ::= Test:SrcExp SrcStatement*;
SrcIfClause            : SrcIfWhenClause;
SrcWhenClause          : SrcIfWhenClause;
SrcForStmt             : SrcStatement ::= SrcForIndex* SrcStatement*;
SrcWhileStmt           : SrcStatement ::= Test:SrcExp SrcWhileStmt:SrcStatement*;

SrcParExp    : SrcExp ::= SrcExp;
SrcIfExp     : SrcExp ::= SrcIfExp:SrcExp ThenExp:SrcExp ElseExp:SrcExp;

abstract SrcBinExp : SrcExp ::= Left:SrcExp Right:SrcExp;

abstract SrcArtmBinExp : SrcBinExp;
SrcDotAddExp : SrcArtmBinExp;
SrcDotSubExp : SrcArtmBinExp;
SrcDotMulExp : SrcArtmBinExp;
SrcDotDivExp : SrcArtmBinExp;
SrcDotPowExp : SrcArtmBinExp; // Easy to make parser take care of this: should be a Primary
SrcAddExp : SrcDotAddExp;
SrcSubExp : SrcDotSubExp;
SrcMulExp : SrcDotMulExp;
SrcDivExp : SrcDotDivExp;
SrcPowExp : SrcDotPowExp; // Easy to make parser take care of this: should be a Primary
SrcNegExp : SrcExp ::= SrcExp;

SrcRealLitExp    : SrcExp ::= <UNSIGNED_NUMBER>;
SrcIntegerLitExp : SrcExp ::= <UNSIGNED_INTEGER>;
SrcStringLitExp  : SrcExp ::= <STRING>;
abstract SrcBooleanLitExp : SrcExp;
SrcBooleanLitExpTrue  : SrcBooleanLitExp;
SrcBooleanLitExpFalse : SrcBooleanLitExp;

SrcFunctionCall : SrcExp ::= Name:SrcAccess [SrcFunctionArguments];
SrcPartialFunctionCall : SrcFunctionCall;

SrcFunctionArguments : SrcBaseNode::= SrcExp* SrcNamedArgument*;
SrcNamedArgument     : SrcBaseNode::= Name:SrcAccess SrcExp;

SrcIterExp  : SrcExp ::= SrcExp SrcForIndex*;
SrcRangeExp : SrcExp ::= SrcExp*;

abstract SrcLogBinExp : SrcBinExp;
SrcLtExp  : SrcLogBinExp;
SrcLeqExp : SrcLogBinExp;
SrcGtExp  : SrcLogBinExp;
SrcGeqExp : SrcLogBinExp;
SrcEqExp  : SrcLogBinExp;
SrcNeqExp : SrcLogBinExp;
SrcNotExp : SrcExp ::= SrcExp;
SrcOrExp  : SrcLogBinExp;
SrcAndExp : SrcLogBinExp;

SrcIdDecl : SrcBaseNode ::= <ID>;

SrcDerExp : SrcExp ::= SrcExp;

SrcAccessExp : SrcExp ::= SrcAccess;

abstract SrcAccess : SrcBaseNode;
SrcDot             : SrcAccess      ::= SrcAccess*;
SrcGlobalAccess    : SrcAccess      ::= SrcAccess;
SrcNamedAccess     : SrcAccess      ::= <ID>;
SrcArrayAccess     : SrcNamedAccess ::= SrcArraySubscripts;

SrcArrayConstructor : SrcExp ::= SrcFunctionArguments;
SrcMatrix           : SrcExp ::= Row:SrcMatrixRow*;
SrcMatrixRow        : SrcExp ::= SrcExp*;

SrcArraySubscripts : SrcBaseNode ::= SrcSubscript*;
abstract SrcSubscript : SrcBaseNode;
SrcColonSubscript : SrcSubscript;
SrcExpSubscript   : SrcSubscript ::= SrcExp;

SrcTimeExp : SrcExp;
SrcEndExp  : SrcExp;

SrcEndDecl : SrcBaseNode ::= <EndID:String>;
