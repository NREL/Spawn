import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.Collection;
import java.util.Iterator;

/*
    Copyright (C) 2016 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect eliminateLinearEquations {

    public class FClass {
        private static final int ALIAS_SIZE = 2;

        /**
         *  <h1>Eliminate Linear Equations</h1>
         *  <p>
         *  Eliminates <i>simple</i> linear equations from a set of equations.
         */
        public class eliminateLinearEquations extends Transformation {

            public eliminateLinearEquations() {
                super("eliminate_linear_equations");
            }

            @Override
            public void perform() {
                ArrayList<FAbstractEquation> equations = new ArrayList<FAbstractEquation>();
                for (FAbstractEquation faq : getFAbstractEquations()) {
                    if (faq.isSimpleLinear()) {
                        equations.add(faq);
                    }
                }

                Set<FAbstractEquation> modified = new HashSet<FAbstractEquation>();
                Map<FAbstractEquation, Map<String, Integer>> equationMap = new LinkedHashMap<>();
                for (int i = 0; i < equations.size(); ++i) {
                    FAbstractEquation src = equations.get(i);

                    Map<String, Integer> srcCoeff = src.coefficientMap();
                    if (hasSuperfluousTerms(srcCoeff)) {
                        FAbstractEquation newEquation = removeSuperfluousTerms(src, srcCoeff);
                        equations.set(i, newEquation);
                        modified.add(newEquation);
                    }
                    equationMap.put(src, srcCoeff);

                    for (int j = i + 1; j < equations.size(); ++j) {
                        FAbstractEquation dest = equations.get(j);

                        if (modified.contains(dest)) {
                            continue;
                        }
                        
                        if (!equationMap.containsKey(dest)) {
                            equationMap.put(dest, dest.coefficientMap());
                        }
                        FAbstractEquation newEquation = removeAliasesFromEquations(equationMap, src, dest);
                        if (newEquation != null) {
                            // ASTNode.log.debug("Rewriting " + dest + ", using\n\t" + src + "\n\tto\n" +
                            //         newEquation + ".");
                            equations.set(j, newEquation);
                            modified.add(newEquation);
                        }
                    }
                }
            }

            /**
             * Checks if an equation has terms that cancel out, i.e. "x + z = y + z".
             */
            protected boolean hasSuperfluousTerms(Map<String, Integer> coeffs) {
                for (int coeff : coeffs.values()) {
                    if (coeff == 0) {
                        return true;
                    }
                }
                return false;
            }

            /**
             * Removes any terms that cancel out from the equation, i.e. "x + z = y + z" -> "x = y".
             */
            protected FAbstractEquation removeSuperfluousTerms(
                    FAbstractEquation oldEquation, Map<String, Integer> coeffs) {
                ArrayList<FExp> leftExps = new ArrayList<FExp>();
                ArrayList<FExp> rightExps = new ArrayList<FExp>();
                for (String key : coeffs.keySet()) {
                    int coeff = coeffs.get(key);
                    if (coeff > 0) {
                        leftExps.add(newTerm(coeff, key));
                    } else if (coeff < 0) {
                        rightExps.add(newTerm(-coeff, key));
                    }
                }
                FAbstractEquation newEquation = new FEquation(addTree(leftExps), addTree(rightExps));
                oldEquation.replaceMe(newEquation);
                return newEquation;
            }

            /**
             *  Removes an alias expression mutual for two equations.
             *  
             *  @param  equationMap
             *          An equation map; each equation key maps to another map which maps the terms used in the
             *          equation to their respective coefficients.
             *  @param  source
             *          The equation to compare against {@code dest}.
             *  @param  dest
             *          The equation to compare against {@code source}. This equation will be overwritten in case a
             *          sub-expression is eliminated.
             *  @return
             *          The modified equation, {@code null} otherwise.
             */
            protected FAbstractEquation removeAliasesFromEquations(
                    Map<FAbstractEquation, Map<String, Integer>> equationMap,
                    FAbstractEquation source, FAbstractEquation dest) {
                
                Map<String, Integer> coeffSource = equationMap.get(source);
                Map<String, Integer> coeffDest   = equationMap.get(dest);
                
                Set<String> mutual       = new LinkedHashSet<>();
                Set<String> uniqueSource = new LinkedHashSet<>();
                Set<String> uniqueDest   = new LinkedHashSet<>();
                
                if (!coefficientSort(mutual, uniqueSource, uniqueDest, coeffSource, coeffDest)) {
                    return null;
                }
                
                int beforeSize = eqnWeight(coeffDest);
                
                String pivot = mutual.iterator().next();
                mutual.remove(pivot);
                
                // Calculate coefficients to use
                int c1 = coeffSource.get(pivot);
                int c2 = coeffDest.get(pivot);
                int cSign = (c1 * c2 >= 0) ? 1 : -1;
                int rCoeffMul = Math.abs(c2) * cSign;
                int lCoeffMul = Math.abs(c1);
                
                ArrayList<Integer> coeffs = new ArrayList<>();
                for (String key : uniqueDest) {
                    coeffs.add(lCoeffMul * coeffDest.get(key));
                }
                for (String key : uniqueSource) {
                    coeffs.add(rCoeffMul * coeffSource.get(key));
                }
                
                ArrayList<String> mutualToUse = new ArrayList<>();
                for (String key : mutual) {
                    int coeff = c2 * coeffSource.get(key) - c1 * coeffDest.get(key);
                    if (coeff != 0) {
                        if (c1 < 0) {
                            coeff = -coeff;
                        }
                        coeffs.add(coeff);
                        mutualToUse.add(key);
                    }
                }
                
                // Minimize coefficients
                int gcd = coeffDivisor(coeffs);
                for (int i = 0, n = coeffs.size(); i < n; i++) {
                    coeffs.set(i, coeffs.get(i) / gcd);
                }
                
                // Check if new equation is better
                if (eqnWeight(coeffs, uniqueDest, uniqueSource, mutualToUse) >= beforeSize) {
                    return null;
                }
                
                // Create expressions
                ArrayList<FExp> leftExps = new ArrayList<>();
                ArrayList<FExp> rightExps = new ArrayList<>();
                int i = 0;
                for (String key : uniqueDest) {
                    leftExps.add(newTerm(coeffs.get(i++), key));
                }
                for (String key : uniqueSource) {
                    rightExps.add(newTerm(coeffs.get(i++), key));
                }
                for (String key : mutualToUse) {
                    rightExps.add(newTerm(coeffs.get(i++), key));
                }
                
                FAbstractEquation newEqn = new FEquation(addTree(leftExps), addTree(rightExps));
                dest.replaceMe(newEqn);
                return newEqn;
            }

            /**
             * Calculate the weight to use for a given coefficient map key when deciding if 
             * the transformation is beneficial.
             * 
             * Literals gives 1, variables 3 or 4 (3 if coeff == 1), and time 5.
             */
            protected int keyWeight(String key, int coeff) {
                if (coeff == 0) {
                    return 0;
                } else if (key.equals(FLitExp.COEFF_KEY)) {
                    return 1;
                } else if (key.equals(FTimeExp.COEFF_KEY)) {
                    return 5;
                } else {
                    return (coeff == 1) ? 3 : 4;
                }
            }

            /**
             * Calculate the weight of a proposed equation, using keyWeight() for the weight
             * of an individual term.
             */
            protected int eqnWeight(ArrayList<Integer> coeffs, Collection<String>... keySets) {
                int res = 0;
                int i = 0;
                for (Collection<String> keySet : keySets) {
                    for (String key : keySet) {
                        res += keyWeight(key, coeffs.get(i));
                        i++;
                    }
                }
                return res;
            }

            /**
             * Calculate the weight of an existing equation, using keyWeight() for the weight
             * of an individual term.
             */
            protected int eqnWeight(Map<String, Integer> coeffMap) {
                int res = 0;
                for (String key : coeffMap.keySet()) {
                    res += keyWeight(key, coeffMap.get(key));
                }
                return res;
            }

            /**
             * Returns the greatest common divisor of two integers.
             * 
             * Uses Euclid's algorithm.
             */
            public int gcd(int a, int b) {
                while (b != 0) {
                    int tmp = b;
                    b = a % b;
                    a = tmp;
                }
                return a;
            }

            /**
             * Returns the greatest common divisor of a collection of integers, with the same 
             * sign as the majority of the integers.
             * 
             * Uses Euclid's algorithm.
             */
            public int coeffDivisor(Collection<Integer> n) {
                Iterator<Integer> i = n.iterator();
                int res = i.hasNext() ? i.next() : 0;
                int neg = (res < 0) ? 1 : 0;
                while (i.hasNext()) {
                    int v = i.next();
                    res = gcd(res, v);
                    if (v < 0) {
                        neg++;
                    }
                }
                res = Math.abs(res);
                return (neg > n.size() / 2) ? -res : res;
            }

            /**
             * Sorts coefficient keys according to whether or not they exist in both equations' key sets or not.
             * 
             * @param   mutual
             *          The set in which to put keys present in both equations.
             * @param   sourceUnique
             *          The set in which to put keys only present in the source equation.
             * @param   destUnique
             *          The set in which to put keys only present in the destination equation.
             * @param   sourceKeys
             *          The coefficient keys of the source equation.
             * @param   destKeys
             *          The coefficient keys of the destination equation.
             */
            private boolean coefficientSort(Set<String> mutual, Set<String> sourceUnique, Set<String> destUnique,
                    Map<String, Integer> coeffSrc, Map<String, Integer> coeffDest) {

                Set<String> destKeys = coeffDest.keySet();
                for (String key : coeffSrc.keySet()) {
                    if (coeffSrc.get(key) != 0) {
                        if (destKeys.contains(key) && coeffDest.get(key) != 0) {
                            mutual.add(key);
                        } else {
                            sourceUnique.add(key);
                        }
                    }
                }
                for (String key : destKeys) {
                    if (coeffDest.get(key) != 0 && !mutual.contains(key)) {
                        destUnique.add(key);
                    }
                }

                if (mutual.isEmpty()) {
                    return false;
                }

                return (!sourceUnique.isEmpty() || !destUnique.isEmpty()) && 
                       sourceUnique.size() + destUnique.size() <= ALIAS_SIZE;
            }

            /* ========================= *
             *  Create new expressions.  *
             * ========================= */

            private FExp addTree(ArrayList<FExp> exps) {
                if (exps.size() == 0) {
                    return new FIntegerLitExp(0);
                }
                if (exps.size() == 1) {
                    return exps.get(0);
                }
                return FExp.createBalancedBinaryTree(new FAddExp(), exps);
            }

            private FExp addTree(FExp exp, ArrayList<FExp> exps) {
                return new FAddExp(exp, addTree(exps));
            }

            private FExp newDivision(int nominator, int denominator) {
                if (nominator % denominator == 0) {
                    return new FIntegerLitExp(nominator / denominator);
                }
                return new FDivExp(new FIntegerLitExp(nominator), new FIntegerLitExp(denominator));
            }

            private FExp newTerm(String expKey) {
                if (expKey.equals(FLitExp.COEFF_KEY)) {
                    return new FIntegerLitExp(1);
                } else if (expKey.equals(FTimeExp.COEFF_KEY)) {
                    return new FTimeExp();
                }
                return new FAccessExp(expKey);
            }

            private FExp newTerm(int coeff, String expKey) {
                FExp res = newTerm(expKey);
                if (coeff != 1) {
                    res = new FMulExp(new FIntegerLitExp(coeff), res);
                }
                return res;
            }
        }

    }

    /* ============================ *
     *  Collect term coefficients.  *
     * ============================ */

    syn Map<String, Integer> FAbstractEquation.coefficientMap() {
        throw new UnsupportedOperationException();
    }
    eq FEquation.coefficientMap() {
        Map<String, Integer> coefficientMap = new LinkedHashMap<>();

        for (FExp exp : linearTerms()) {
            String coeffKey = exp.myCoeffKey();
            int val = exp.coeff();
            if (val != 0 || !coeffKey.equals(FLitExp.COEFF_KEY)) {
                int newValue = val + (coefficientMap.containsKey(coeffKey) ? coefficientMap.get(coeffKey) : 0);
                coefficientMap.put(coeffKey, newValue);
            }
        }
        return coefficientMap;
    }

    syn java.util.List<FExp> FAbstractEquation.linearTerms() = Collections.<FExp> emptyList();
    eq FEquation.linearTerms() {
        ArrayList<FExp> linearTerms = new ArrayList<FExp>();
        linearTerms.addAll(referencedCommonAccessExps());
        linearTerms.addAll(timeExps());
        for (FExp exp : terms()) {
            if (exp.isLiteralExp()) {
                linearTerms.add(exp);
            }
        }
        return linearTerms;
    }

    /* ======================== *
     *  Calculate coefficient.  *
     * ======================== */

    syn int FExp.coeff() = myCoeff() * outerCoeff();

    syn int FExp.myCoeff()                          = 1;
    eq FIntegerLitExp.myCoeff()                     = getValue();
    eq FRealLitExp.myCoeff()                        = (int) getValue();

    inh int FExp.outerCoeff();
    eq FAbstractEquation.getChild().outerCoeff()    = 1;
    eq FEquation.getRight().outerCoeff()            = -1;

    eq FLitExp.getChild().outerCoeff()              = outerCoeff() * myCoeff();
    eq FDotSubExp.getRight().outerCoeff()           = - coeff();
    eq FNegExp.getChild().outerCoeff()              = - coeff();

    eq FDotMulExp.getChild(int index).outerCoeff()  {
        FExp literal = getLiteral();
        if (literal == getChild(index)) {
            return coeff();
        }
        return literal.coeff();
    }

    syn FExp FDotMulExp.getLiteral() {
        if (getLeft().isLiteralExp()) {
            return getLeft();
        } else if (getRight().isLiteralExp()) {
            return getRight();
        } else {
            return null;
        }
    }

    syn FExp FDotMulExp.getTerm() = getLeft().isLiteralExp() ? getRight() : getLeft();

    /* ============================ *
     *  Keys for coefficient maps.  *
     * ============================ */

    public static final String FLitExp.COEFF_KEY     = "#const";
    public static final String FTimeExp.COEFF_KEY    = "time";
    syn String FExp.myCoeffKey() {
        throw new UnsupportedOperationException();
    }

    eq CommonAccessExp.myCoeffKey()                 = name();
    eq FLitExp.myCoeffKey()                         = COEFF_KEY;
    eq FNegExp.myCoeffKey()                         = getFExp().myCoeffKey();
    eq FTimeExp.myCoeffKey()                        = COEFF_KEY;

    /* ==================================================== *
     *  Determine whether or not to eliminate an equation.  *
     * ==================================================== */

    syn boolean FAbstractEquation.isSimpleLinear() = false;
    eq FEquation.isSimpleLinear() = !containsActiveAnnotations() && !isSimpleAlias() && type().isNumeric() &&
            getLeft().isSimpleLinearExp() && getRight().isSimpleLinearExp();

    syn boolean FExp.isSimpleLinearExp()    = false;
    eq FBinExp.isSimpleLinearExp()          = getLeft().isSimpleLinearExp() && getRight().isSimpleLinearExp();
    eq FBoolBinExp.isSimpleLinearExp()      = false;
    eq FDotDivExp.isSimpleLinearExp()       = false;
    eq FDotMulExp.isSimpleLinearExp()       = getLiteral() != null && super.isSimpleLinearExp();
    eq FDotPowExp.isSimpleLinearExp()       = false;

    eq FAbstractDerExp.isSimpleLinearExp()  = false;
    eq FNegExp.isSimpleLinearExp()          = getFExp().isSimpleLinearExp();
    eq FRelExp.isSimpleLinearExp()          = false;

    eq CommonAccessExp.isSimpleLinearExp()  = true;
    eq FTimeExp.isSimpleLinearExp()         = true;
    eq FIntegerLitExp.isSimpleLinearExp()   = true;
    eq FRealLitExp.isSimpleLinearExp()      = getValue() == ((int) getValue());

    syn boolean FAbstractEquation.isSimpleAlias() = false;
    eq FEquation.isSimpleAlias() = getLeft().isSimpleAlias() && getRight().isSimpleAlias();
    syn boolean FExp.isSimpleAlias() = false;
    eq CommonAccessExp.isSimpleAlias() = true;
    eq FLitExp.isSimpleAlias() = true;
    eq FNegExp.isSimpleAlias() = getFExp().isSimpleAlias();
}