#!/usr/bin/env python 
# -*- coding: utf-8 -*-

# Copyright (C) 2015 Modelon AB
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from pyjmi.common.io import ResultDymolaTextual
from pyjmi import transfer_optimization_problem, get_files_path
import numpy as N
import matplotlib.pyplot as plt
import os

def run_demo(with_plots=True):
    """
    This example is about moving a cart with an attached pendulum from one
    position to another, while starting and ending in steady state and avoiding
    an ellipticla obstacle for the pendulum.

    This example is a part of the third lab in the course FRTN05 Nonlinear
    Control and Servo systems at the Department of Automatic Control at Lund
    University, Sweden. In the lab, the trajectories generated by this script
    are realized by tracking them with linear MPC.

    The model has 4 states: Cart position and velocity, pendulum angle and
    angular velocity. A nearly optimal initial guess has been precomputed and
    is used in this script.
    
    The problem was developed by Pontus Giselsson and is published in
    @InProceedings{mod09pg,
      author = "Giselsson, Pontus and {\AA}kesson, Johan and Robertsson, Anders",
      title = "Optimization of a Pendulum System using {Optimica} and {Modelica}",
      booktitle = "7th International Modelica Conference 2009",
      address = "Como, Italy",
      year = 2009,
      month = sep,
    }
    """
    # Create compiler and compile the pendulum model
    file_path = os.path.join(get_files_path(), "cart_pendulum.mop")
    pend_opt = transfer_optimization_problem("CartPendulum", file_path)

    # Define number of elements in the discretization grid and 
    # number of collocation points in each element
    n_e = 150
    n_cp = 3

    # Initialize the optimization problem with precomputed initial guess
    result_file_path = os.path.join(get_files_path(), 'cart_pendulum_result.txt')
    init_res = ResultDymolaTextual(result_file_path)

    # Solve the optimization problem
    opts = pend_opt.optimize_options()
    opts['IPOPT_options']['max_iter'] = 1000
    opts['IPOPT_options']['linear_solver'] = "mumps"
    opts['IPOPT_options']['tol'] = 1e-12
    opts['n_e'] = n_e
    opts['n_cp'] = n_cp
    opts['init_traj'] = init_res
    res = pend_opt.optimize(options=opts)
						    
    # Extract variable profiles and plot the results
    a_ref = res['a_ref']
    x_p = res['x_p']
    y_p = res['y_p']
    t = res['time']

    if with_plots:
	plt.close(1)
	plt.figure(1)
	plt.plot(t,a_ref)
	plt.grid()
	plt.title('Input signal to process ($a_{ref}$)')
	plt.xlabel('Time (s)')
	plt.ylabel('Acceleration $m/s^2$')
		
	plt.close(2)
	plt.figure(2)
	plt.plot(x_p,y_p)
	plt.grid()
	plt.title('Pendulum end-point path and obstacle')
	plt.xlabel('x-coordinate (m)')
	plt.ylabel('y-coordinate (m)')

	x_obst = N.linspace(-0.35,-0.25)
	y_obst = N.sqrt(1-((x_obst+0.3)/0.05)**2)*0.3 - 0.4

	x_track = N.linspace(-1.45,0.1)
	y_track = N.zeros(N.size(x_track))

	plt.plot(x_obst,y_obst)
	plt.plot(x_track,y_track,'--')

	plt.show()

if __name__ == "__main__":
    run_demo()
