#    Copyright (C) 2009 Modelon AB
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3 as published 
#    by the Free Software Foundation, or optionally, under the terms of the 
#    Common Public License version 1.0 as published by IBM.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License, or the Common Public License, for more details.
#
#    You should have received copies of the GNU General Public License
#    and the Common Public License along with this program.  If not, 
#    see <http://www.gnu.org/licenses/> or 
#    <http://www.ibm.com/developerworks/library/os-cpl.html/> respectively.

#
# NOTICE: This make file is intended to be run in a Linux shell.
#
# Usage:
#   This makefile is intended to be used by the code generated by the
#   JModelica compilers. The following arguments are supported:
#   
#   FILE_NAME             (mandatory) The name of the C file.
#   PLATFORM              (mandatory) The platform we are compiling for, 
#                         currently only used to decide where to place binary.
#                         Should be linux32 or linux64.
#   JMODELICA_HOME        (mandatory) The directory where JModelica has been built,
#                         or equivalently, the directory of a binary JModelica
#                         distribution.
#   SUNDIALS_HOME         (mandatory) The directory of Sundials.
#   EXT_LIB_DIRS          List of external library directories.
#   EXT_LIBS              List of external libraries.
#   EXT_INC_DIRS          List of external include directories.
#   EXTRA_CFLAGS          Extra CFLAGS for specific files
#                         Format is (with e1.c and e2.c) "e1:O2:pedantic e2:O1"
#
# The following targets are supported:
#    fmume10      Build a shared object file containing the generated code and the
#                 Model Exchange for API FMI 1.0.
#    fmucs10      Build a shared object file containing the generated code and the
#                 co-simulation API for FMI 1.0.
#    fmume20      Build a shared object file containing the generated code and the
#                 Model Exchange for API FMI 2.0.
#    fmucs20      Build a shared object file containing the generated code and the
#                 co-simulation API for FMI 2.0.
#    fmumecs20    Build a shared object file containing the generated code and the
#                 Model Exchange API and co-simulation API for FMI 2.0.
#        
# Example:
#  make -f Makefile.linux linux32 \
#    FILE_NAME=CCodeGenTests.CCodeGenTest1 \
#    JMODELICA_HOME=/home/jakesson/projects/JModelica/build \
#

# Name of shared library
FILE_NAME = 

# Extra CFLAGS for specific source files.
EXTRA_CFLAGS =

# Platform name - controls what sub-directory the binary is placed in
PLATFORM = 

# JModelica home
JMODELICA_HOME = 

# SUNDIALS home
SUNDIALS_HOME =

# Additional library directories
EXT_LIB_DIRS =

# Additional libraries
EXT_LIBS = 
EXTERNAL_LIBS = $(EXT_LIBS:%=-l%) -llapack -lblas -lgfortran

# Additional include directories
EXT_INC_DIRS =

# Directory to place binary in
BINARY_BASE_DIR = binaries
BINARY_DIR = $(BINARY_BASE_DIR)/$(PLATFORM)

SHARED = $(BINARY_DIR)/$(FILE_NAME).so
EXECUTABLE = $(BINARY_BASE_DIR)/$(FILE_NAME)

# Object files to be included in the shared library
OBJS = $(patsubst sources/%.c, %.o, $(wildcard sources/*.c)) $(patsubst sources/%.cpp, %.o, $(wildcard sources/*.cpp))

# C++ Compiler command
CXX = g++

# C Compiler command
CC = gcc


# C Compiler options
CFLAGS = -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse

SHARED_LDFLAGS = -shared -Wl,-rpath,'$$ORIGIN',--no-undefined -pthread

# Directories with header files
JMI_INC_DIR = ${JMODELICA_HOME}/include
RUNTIMELIBRARY_INC_DIR = ${JMODELICA_HOME}/include/RuntimeLibrary
STANDARD_HEADER_INC_DIR = ${JMODELICA_HOME}/ThirdParty/FMI/2.0
SUNDIALS_INC_DIR = $(SUNDIALS_HOME)/include

# Directories with libraries
JMI_LIB_DIR = ${JMODELICA_HOME}/lib
RUNTIMELIBRARY_LIB_DIR = ${JMODELICA_HOME}/lib/RuntimeLibrary
SUNDIALS_LIB_DIR = $(SUNDIALS_HOME)/lib
MINPACK_LIB_DIR = ${JMODELICA_HOME}/ThirdParty/Minpack/lib

# Libraries necessary to link with jmi
# Reused parts
LIBS_FMU_STD = -ljmi -ldl "-L$(JMI_LIB_DIR)" $(EXT_LIB_DIRS) $(EXTERNAL_LIBS) -lModelicaExternalC -lzlib -ljmi
LIB_SUNDIALS = -L$(SUNDIALS_LIB_DIR) -l:libsundials_kinsol.a -l:libsundials_nvecserial.a
LIB_MINPACK  = -L$(MINPACK_LIB_DIR) -l:libcminpack.a
LIB_STD      = -lstdc++ -lm
LIB_COMMON   = $(LIB_SUNDIALS) $(LIB_MINPACK) $(LIB_STD)

# For different targets
LIBS_FMUME10 = -lfmi1_me $(LIBS_FMU_STD) $(LIB_COMMON)
LIBS_FMUCS10 = -lfmi1_cs -lfmi1_me $(LIBS_FMU_STD) $(LIB_COMMON) -l:libsundials_cvode.a
LIBS_FMU20   = -lfmi2 $(LIBS_FMU_STD) $(LIB_COMMON) -l:libsundials_cvode.a
LIBS_CEVAL   = $(LIBS_FMU_STD)

# Include paths for compilation
INCL = -I$(RUNTIMELIBRARY_INC_DIR) -I$(STANDARD_HEADER_INC_DIR) $(EXT_INC_DIRS) -I$(SUNDIALS_INC_DIR)

# set variable to correct makefile (for recursive call in fmume/fmucs)
MAKEFILE = $(lastword $(MAKEFILE_LIST))


ceval:
	$(MAKE) -f $(MAKEFILE) ceval_

ceval_: $(OBJS)
	mkdir -p $(BINARY_BASE_DIR)
	$(CC) $(CFLAGS) -o $(EXECUTABLE) $(OBJS) -L${RUNTIMELIBRARY_LIB_DIR} $(LIBS_CEVAL) $(LIB_STD)
	$(RM) $(OBJS)


fmume10:
	$(MAKE) -f $(MAKEFILE) fmume10_

fmume10_: $(OBJS)
	mkdir -p $(BINARY_DIR)
	$(CXX) $(SHARED_LDFLAGS) $(CFLAGS) -o $(SHARED) $(OBJS) -L$(RUNTIMELIBRARY_LIB_DIR) $(LIBS_FMUME10)
	$(RM) $(OBJS)

fmucs10:
	$(MAKE) -f $(MAKEFILE) fmucs10_

fmucs10_: $(OBJS)
	mkdir -p $(BINARY_DIR)
	$(CXX) $(SHARED_LDFLAGS) $(CFLAGS) -o $(SHARED) $(OBJS) -L$(RUNTIMELIBRARY_LIB_DIR) $(LIBS_FMUCS10)
	$(RM) $(OBJS)

fmume20:
	$(MAKE) -f $(MAKEFILE) fmume20_

fmume20_: $(OBJS)
	mkdir -p $(BINARY_DIR)
	$(CXX) $(SHARED_LDFLAGS) $(CFLAGS) -o $(SHARED) $(OBJS) -L${RUNTIMELIBRARY_LIB_DIR} $(LIBS_FMU20)
	$(RM) $(OBJS)
	
fmucs20:
	$(MAKE) -f $(MAKEFILE) fmucs20_
	
fmucs20_: $(OBJS)
	mkdir -p $(BINARY_DIR)
	$(CXX) $(SHARED_LDFLAGS) $(CFLAGS) -o $(SHARED) $(OBJS) -L${RUNTIMELIBRARY_LIB_DIR} $(LIBS_FMU20)
	$(RM) $(OBJS)
	
fmumecs20:
	$(MAKE) -f $(MAKEFILE) fmucs20_
	
fmumecs20_: $(OBJS)
	mkdir -p $(BINARY_DIR)
	$(CXX) $(SHARED_LDFLAGS) $(CFLAGS) -o $(SHARED) $(OBJS) -L${RUNTIMELIBRARY_LIB_DIR} $(LIBS_FMU20)
	$(RM) $(OBJS)


# Compile
%.o: sources/%.c
	$(CC) $(CFLAGS) $(INCL) -c -o $@ $<


# Create a rule which uses the first item in arg as src name and
# following items as additional CFLAGS. Argument "file:-O2:-d"
# will expand to the rule "file.o : CFLAGS = $(CFLAGS) -O2 -d"
define cflagrule
$(word 1,$(1)).o : CFLAGS = $(CFLAGS) $(wordlist 2,$(words $(1)),$(1))
endef

# For each word in variable EXTRA_CFLAGS, create a cflagrule
# Example "main2 main3:O3 main:O2:pedantic"
$(foreach src, $(EXTRA_CFLAGS),$(eval $(call cflagrule, $(subst :, -,$(src)))))

clean:
	$(RM) $(SHARED) $(OBJS)
